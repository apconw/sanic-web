services:
  # The postgres database.
  db:
    image: postgres:15-alpine
    restart: always
    env_file:
      - ./middleware.env
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-difyai123456***REMOVED***
      POSTGRES_DB: ${POSTGRES_DB:-dify***REMOVED***
      PGDATA: ${PGDATA:-/var/lib/postgresql/data/pgdata***REMOVED***
    command: >
      postgres -c 'max_connections=${POSTGRES_MAX_CONNECTIONS:-100***REMOVED***'
               -c 'shared_buffers=${POSTGRES_SHARED_BUFFERS:-128MB***REMOVED***'
               -c 'work_mem=${POSTGRES_WORK_MEM:-4MB***REMOVED***'
               -c 'maintenance_work_mem=${POSTGRES_MAINTENANCE_WORK_MEM:-64MB***REMOVED***'
               -c 'effective_cache_size=${POSTGRES_EFFECTIVE_CACHE_SIZE:-4096MB***REMOVED***'
    volumes:
      - ${PGDATA_HOST_VOLUME:-./volumes/db/data***REMOVED***:/var/lib/postgresql/data
    ports:
      - "${EXPOSE_POSTGRES_PORT:-5432***REMOVED***:5432"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 1s
      timeout: 3s
      retries: 30

  # The redis cache.
  redis:
    image: redis:6-alpine
    restart: always
    env_file:
      - ./middleware.env
    environment:
      REDISCLI_AUTH: ${REDIS_PASSWORD:-difyai123456***REMOVED***
    volumes:
      # Mount the redis data directory to the container.
      - ${REDIS_HOST_VOLUME:-./volumes/redis/data***REMOVED***:/data
    # Set the redis password when startup redis server.
    command: redis-server --requirepass ${REDIS_PASSWORD:-difyai123456***REMOVED***
    ports:
      - "${EXPOSE_REDIS_PORT:-6379***REMOVED***:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]

  # The DifySandbox
  sandbox:
    image: langgenius/dify-sandbox:0.2.12
    restart: always
    env_file:
      - ./middleware.env
    environment:
      # The DifySandbox configurations
      # Make sure you are changing this key for your deployment with a strong key.
      # You can generate a strong key using `openssl rand -base64 42`.
      API_KEY: ${SANDBOX_API_KEY:-dify-sandbox***REMOVED***
      GIN_MODE: ${SANDBOX_GIN_MODE:-release***REMOVED***
      WORKER_TIMEOUT: ${SANDBOX_WORKER_TIMEOUT:-15***REMOVED***
      ENABLE_NETWORK: ${SANDBOX_ENABLE_NETWORK:-true***REMOVED***
      HTTP_PROXY: ${SANDBOX_HTTP_PROXY:-http://ssrf_proxy:3128***REMOVED***
      HTTPS_PROXY: ${SANDBOX_HTTPS_PROXY:-http://ssrf_proxy:3128***REMOVED***
      SANDBOX_PORT: ${SANDBOX_PORT:-8194***REMOVED***
      PIP_MIRROR_URL: ${PIP_MIRROR_URL:-***REMOVED***
    volumes:
      - ./volumes/sandbox/dependencies:/dependencies
      - ./volumes/sandbox/conf:/conf
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8194/health" ]
    networks:
      - ssrf_proxy_network

  # plugin daemon
  plugin_daemon:
    image: langgenius/dify-plugin-daemon:0.1.3-local
    restart: always
    env_file:
      - ./middleware.env
    environment:
      # Use the shared environment variables.
      DB_HOST: ${DB_HOST:-db***REMOVED***
      DB_PORT: ${DB_PORT:-5432***REMOVED***
      DB_USERNAME: ${DB_USER:-postgres***REMOVED***
      DB_PASSWORD: ${DB_PASSWORD:-difyai123456***REMOVED***
      DB_DATABASE: ${DB_PLUGIN_DATABASE:-dify_plugin***REMOVED***
      REDIS_HOST: ${REDIS_HOST:-redis***REMOVED***
      REDIS_PORT: ${REDIS_PORT:-6379***REMOVED***
      REDIS_PASSWORD: ${REDIS_PASSWORD:-difyai123456***REMOVED***
      SERVER_PORT: ${PLUGIN_DAEMON_PORT:-5002***REMOVED***
      SERVER_KEY: ${PLUGIN_DAEMON_KEY:-lYkiYYT6owG+71oLerGzA7GXCgOT++6ovaezWAjpCjf+Sjc3ZtU+qUEi***REMOVED***
      MAX_PLUGIN_PACKAGE_SIZE: ${PLUGIN_MAX_PACKAGE_SIZE:-52428800***REMOVED***
      PPROF_ENABLED: ${PLUGIN_PPROF_ENABLED:-false***REMOVED***
      DIFY_INNER_API_URL: ${PLUGIN_DIFY_INNER_API_URL:-http://host.docker.internal:5001***REMOVED***
      DIFY_INNER_API_KEY: ${PLUGIN_DIFY_INNER_API_KEY:-QaHbTe77CtuXmsfyhR7+vRjI/+XbV1AaFy691iy+kGDv2Jvy0/eAh8Y1***REMOVED***
      PLUGIN_REMOTE_INSTALLING_HOST: ${PLUGIN_DEBUGGING_HOST:-0.0.0.0***REMOVED***
      PLUGIN_REMOTE_INSTALLING_PORT: ${PLUGIN_DEBUGGING_PORT:-5003***REMOVED***
      PLUGIN_WORKING_PATH: ${PLUGIN_WORKING_PATH:-/app/storage/cwd***REMOVED***
      FORCE_VERIFYING_SIGNATURE: ${FORCE_VERIFYING_SIGNATURE:-true***REMOVED***
      PYTHON_ENV_INIT_TIMEOUT: ${PLUGIN_PYTHON_ENV_INIT_TIMEOUT:-120***REMOVED***
      PLUGIN_MAX_EXECUTION_TIMEOUT: ${PLUGIN_MAX_EXECUTION_TIMEOUT:-600***REMOVED***
      PIP_MIRROR_URL: ${PIP_MIRROR_URL:-***REMOVED***
      PLUGIN_STORAGE_TYPE: ${PLUGIN_STORAGE_TYPE:-local***REMOVED***
      PLUGIN_STORAGE_LOCAL_ROOT: ${PLUGIN_STORAGE_LOCAL_ROOT:-/app/storage***REMOVED***
      PLUGIN_INSTALLED_PATH: ${PLUGIN_INSTALLED_PATH:-plugin***REMOVED***
      PLUGIN_PACKAGE_CACHE_PATH: ${PLUGIN_PACKAGE_CACHE_PATH:-plugin_packages***REMOVED***
      PLUGIN_MEDIA_CACHE_PATH: ${PLUGIN_MEDIA_CACHE_PATH:-assets***REMOVED***
      PLUGIN_STORAGE_OSS_BUCKET: ${PLUGIN_STORAGE_OSS_BUCKET:-***REMOVED***
      S3_USE_AWS: ${PLUGIN_S3_USE_AWS:-false***REMOVED***
      S3_USE_AWS_MANAGED_IAM: ${PLUGIN_S3_USE_AWS_MANAGED_IAM:-false***REMOVED***
      S3_ENDPOINT: ${PLUGIN_S3_ENDPOINT:-***REMOVED***
      S3_USE_PATH_STYLE: ${PLUGIN_S3_USE_PATH_STYLE:-false***REMOVED***
      AWS_ACCESS_KEY: ${PLUGIN_AWS_ACCESS_KEY:-***REMOVED***
      AWS_SECRET_KEY: ${PLUGIN_AWS_SECRET_KEY:-***REMOVED***
      AWS_REGION: ${PLUGIN_AWS_REGION:-***REMOVED***
      AZURE_BLOB_STORAGE_CONNECTION_STRING: ${PLUGIN_AZURE_BLOB_STORAGE_CONNECTION_STRING:-***REMOVED***
      AZURE_BLOB_STORAGE_CONTAINER_NAME: ${PLUGIN_AZURE_BLOB_STORAGE_CONTAINER_NAME:-***REMOVED***
      TENCENT_COS_SECRET_KEY: ${PLUGIN_TENCENT_COS_SECRET_KEY:-***REMOVED***
      TENCENT_COS_SECRET_ID: ${PLUGIN_TENCENT_COS_SECRET_ID:-***REMOVED***
      TENCENT_COS_REGION: ${PLUGIN_TENCENT_COS_REGION:-***REMOVED***
      ALIYUN_OSS_REGION: ${PLUGIN_ALIYUN_OSS_REGION:-***REMOVED***
      ALIYUN_OSS_ENDPOINT: ${PLUGIN_ALIYUN_OSS_ENDPOINT:-***REMOVED***
      ALIYUN_OSS_ACCESS_KEY_ID: ${PLUGIN_ALIYUN_OSS_ACCESS_KEY_ID:-***REMOVED***
      ALIYUN_OSS_ACCESS_KEY_SECRET: ${PLUGIN_ALIYUN_OSS_ACCESS_KEY_SECRET:-***REMOVED***
      ALIYUN_OSS_AUTH_VERSION: ${PLUGIN_ALIYUN_OSS_AUTH_VERSION:-v4***REMOVED***
      ALIYUN_OSS_PATH: ${PLUGIN_ALIYUN_OSS_PATH:-***REMOVED***
      VOLCENGINE_TOS_ENDPOINT: ${PLUGIN_VOLCENGINE_TOS_ENDPOINT:-***REMOVED***
      VOLCENGINE_TOS_ACCESS_KEY: ${PLUGIN_VOLCENGINE_TOS_ACCESS_KEY:-***REMOVED***
      VOLCENGINE_TOS_SECRET_KEY: ${PLUGIN_VOLCENGINE_TOS_SECRET_KEY:-***REMOVED***
      VOLCENGINE_TOS_REGION: ${PLUGIN_VOLCENGINE_TOS_REGION:-***REMOVED***
    ports:
      - "${EXPOSE_PLUGIN_DAEMON_PORT:-5002***REMOVED***:${PLUGIN_DAEMON_PORT:-5002***REMOVED***"
      - "${EXPOSE_PLUGIN_DEBUGGING_PORT:-5003***REMOVED***:${PLUGIN_DEBUGGING_PORT:-5003***REMOVED***"
    volumes:
      - ./volumes/plugin_daemon:/app/storage

  # ssrf_proxy server
  # for more information, please refer to
  # https://docs.dify.ai/learn-more/faq/install-faq#18-why-is-ssrf-proxy-needed%3F
  ssrf_proxy:
    image: ubuntu/squid:latest
    restart: always
    volumes:
      - ./ssrf_proxy/squid.conf.template:/etc/squid/squid.conf.template
      - ./ssrf_proxy/docker-entrypoint.sh:/docker-entrypoint-mount.sh
    entrypoint: [ "sh", "-c", "cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && sed -i 's/\r$$//' /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh" ]
    env_file:
      - ./middleware.env
    environment:
      # pls clearly modify the squid env vars to fit your network environment.
      HTTP_PORT: ${SSRF_HTTP_PORT:-3128***REMOVED***
      COREDUMP_DIR: ${SSRF_COREDUMP_DIR:-/var/spool/squid***REMOVED***
      REVERSE_PROXY_PORT: ${SSRF_REVERSE_PROXY_PORT:-8194***REMOVED***
      SANDBOX_HOST: ${SSRF_SANDBOX_HOST:-sandbox***REMOVED***
      SANDBOX_PORT: ${SANDBOX_PORT:-8194***REMOVED***
    ports:
      - "${EXPOSE_SSRF_PROXY_PORT:-3128***REMOVED***:${SSRF_HTTP_PORT:-3128***REMOVED***"
      - "${EXPOSE_SANDBOX_PORT:-8194***REMOVED***:${SANDBOX_PORT:-8194***REMOVED***"
    networks:
      - ssrf_proxy_network
      - default

  # The Weaviate vector store.
  weaviate:
    image: semitechnologies/weaviate:1.19.0
    profiles:
      - ""
      - weaviate
    restart: always
    volumes:
      # Mount the Weaviate data directory to the container.
      - ${WEAVIATE_HOST_VOLUME:-./volumes/weaviate***REMOVED***:/var/lib/weaviate
    env_file:
      - ./middleware.env
    environment:
      # The Weaviate configurations
      # You can refer to the [Weaviate](https://weaviate.io/developers/weaviate/config-refs/env-vars***REMOVED*** documentation for more information.
      PERSISTENCE_DATA_PATH: ${WEAVIATE_PERSISTENCE_DATA_PATH:-/var/lib/weaviate***REMOVED***
      QUERY_DEFAULTS_LIMIT: ${WEAVIATE_QUERY_DEFAULTS_LIMIT:-25***REMOVED***
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: ${WEAVIATE_AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED:-false***REMOVED***
      DEFAULT_VECTORIZER_MODULE: ${WEAVIATE_DEFAULT_VECTORIZER_MODULE:-none***REMOVED***
      CLUSTER_HOSTNAME: ${WEAVIATE_CLUSTER_HOSTNAME:-node1***REMOVED***
      AUTHENTICATION_APIKEY_ENABLED: ${WEAVIATE_AUTHENTICATION_APIKEY_ENABLED:-true***REMOVED***
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: ${WEAVIATE_AUTHENTICATION_APIKEY_ALLOWED_KEYS:-WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih***REMOVED***
      AUTHENTICATION_APIKEY_USERS: ${WEAVIATE_AUTHENTICATION_APIKEY_USERS:-hello@dify.ai***REMOVED***
      AUTHORIZATION_ADMINLIST_ENABLED: ${WEAVIATE_AUTHORIZATION_ADMINLIST_ENABLED:-true***REMOVED***
      AUTHORIZATION_ADMINLIST_USERS: ${WEAVIATE_AUTHORIZATION_ADMINLIST_USERS:-hello@dify.ai***REMOVED***
    ports:
      - "${EXPOSE_WEAVIATE_PORT:-8080***REMOVED***:8080"

networks:
  # create a network between sandbox, api and ssrf_proxy, and can not access outside.
  ssrf_proxy_network:
    driver: bridge
    internal: true
