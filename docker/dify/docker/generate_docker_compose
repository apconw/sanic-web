#!/usr/bin/env python3
import os
import re
import sys


def parse_env_example(file_path***REMOVED***:
    """
    Parses the .env.example file and returns a dictionary with variable names as keys and default values as values.
    """
    env_vars = {***REMOVED***
    with open(file_path, "r"***REMOVED*** as f:
        for line_number, line in enumerate(f, 1***REMOVED***:
            line = line.strip(***REMOVED***
            # Ignore empty lines and comments
            if not line or line.startswith("#"***REMOVED***:
                continue
            # Use regex to parse KEY=VALUE
            match = re.match(r"^([^=]+***REMOVED***=(.****REMOVED***$", line***REMOVED***
            if match:
                key = match.group(1***REMOVED***.strip(***REMOVED***
                value = match.group(2***REMOVED***.strip(***REMOVED***
                # Remove possible quotes around the value
                if (value.startswith('"'***REMOVED*** and value.endswith('"'***REMOVED******REMOVED*** or (
                    value.startswith("'"***REMOVED*** and value.endswith("'"***REMOVED***
                ***REMOVED***:
                    value = value[1:-1]
                env_vars[key] = value
            else:
                print(f"Warning: Unable to parse line {line_number***REMOVED***: {line***REMOVED***"***REMOVED***
    return env_vars


def generate_shared_env_block(env_vars, anchor_name="shared-api-worker-env"***REMOVED***:
    """
    Generates a shared environment variables block as a YAML string.
    """
    lines = [f"x-shared-env: &{anchor_name***REMOVED***"]
    for key, default in env_vars.items(***REMOVED***:
        if key == "COMPOSE_PROFILES":
            continue
        # If default value is empty, use ${KEY:-***REMOVED***
        if default == "":
            lines.append(f"***REMOVED***key***REMOVED***: ${{{key***REMOVED***:-***REMOVED******REMOVED***"***REMOVED***
        else:
            # If default value contains special characters, wrap it in quotes
            if re.search(r"[:\s]", default***REMOVED***:
                default = f"{default***REMOVED***"
            lines.append(f"***REMOVED***key***REMOVED***: ${{{key***REMOVED***:-{default***REMOVED******REMOVED******REMOVED***"***REMOVED***
    return "\n".join(lines***REMOVED***


def insert_shared_env(template_path, output_path, shared_env_block, header_comments***REMOVED***:
    """
    Inserts the shared environment variables block and header comments into the template file,
    removing any existing x-shared-env anchors, and generates the final docker-compose.yaml file.
    """
    with open(template_path, "r"***REMOVED*** as f:
        template_content = f.read(***REMOVED***

    # Remove existing x-shared-env: &shared-api-worker-env lines
    template_content = re.sub(
        r"^x-shared-env: &shared-api-worker-env\s*\n?",
        "",
        template_content,
        flags=re.MULTILINE,
    ***REMOVED***

    # Prepare the final content with header comments and shared env block
    final_content = f"{header_comments***REMOVED***\n{shared_env_block***REMOVED***\n\n{template_content***REMOVED***"

    with open(output_path, "w"***REMOVED*** as f:
        f.write(final_content***REMOVED***
    print(f"Generated {output_path***REMOVED***"***REMOVED***


def main(***REMOVED***:
    env_example_path = ".env.example"
    template_path = "docker-compose-template.yaml"
    output_path = "docker-compose.yaml"
    anchor_name = "shared-api-worker-env"  # Can be modified as needed

    # Define header comments to be added at the top of docker-compose.yaml
    header_comments = (
        "# ==================================================================\n"
        "# WARNING: This file is auto-generated by generate_docker_compose\n"
        "# Do not modify this file directly. Instead, update the .env.example\n"
        "# or docker-compose-template.yaml and regenerate this file.\n"
        "# ==================================================================\n"
    ***REMOVED***

    # Check if required files exist
    for path in [env_example_path, template_path]:
        if not os.path.isfile(path***REMOVED***:
            print(f"Error: File {path***REMOVED*** does not exist."***REMOVED***
            sys.exit(1***REMOVED***

    # Parse .env.example file
    env_vars = parse_env_example(env_example_path***REMOVED***

    if not env_vars:
        print("Warning: No environment variables found in .env.example."***REMOVED***

    # Generate shared environment variables block
    shared_env_block = generate_shared_env_block(env_vars, anchor_name***REMOVED***

    # Insert shared environment variables block and header comments into the template
    insert_shared_env(template_path, output_path, shared_env_block, header_comments***REMOVED***


if __name__ == "__main__":
    main(***REMOVED***
